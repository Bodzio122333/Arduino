/*
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 Author: Przemyslaw Zygmunt <przemek@supla.org>
*/

#ifndef SUPLADEVICE_CPP
	#if defined(UIPETHERNET_H) || defined(ethernet_h)
		EthernetClient client;
		
		long supla_arduino_tcp_read(void *buf, _supla_int_t count) {
		
		    _supla_int_t size = client.available();
		   
		    if ( size > 0 ) {
		        if ( size > count ) size = count;
		        return client.read((uint8_t *)buf, size);
		    };
		
		    return -1;
		};
		
		_supla_int_t supla_arduino_tcp_write(void *buf, _supla_int_t count) {
	     	return client.write((const uint8_t *)buf, count);
		};
		
		bool supla_arduino_svr_connect(const char *server, long port) {
		      return client.connect(server, 2015);
		}
		
		bool supla_arduino_svr_connected(void) {
		      return client.connected();
		}
		
		void supla_arduino_svr_disconnect(void) {
		     client.stop();
		}
		
		void supla_arduino_eth_setup(uint8_t mac[6], IPAddress *ip) {
			  
			  if ( ip )
			  	Ethernet.begin(mac, *ip);
			  else
			    Ethernet.begin(mac);

			  Serial.print("localIP: ");
			  Serial.println(Ethernet.localIP());
			  Serial.print("subnetMask: ");
			  Serial.println(Ethernet.subnetMask());
			  Serial.print("gatewayIP: ");
			  Serial.println(Ethernet.gatewayIP());
			  Serial.print("dnsServerIP: ");
			  Serial.println(Ethernet.dnsServerIP());
		}
		
				
	#else
		UNKNOWN ETHERNET LIBRARY 
	#endif
	
	
	#ifndef SUPLADEVICE_GETCALLBACKS
	#define SUPLADEVICE_GETCALLBACKS
	SuplaDeviceCallbacks supla_arduino_get_callbacks(void) {
		      SuplaDeviceCallbacks cb;
		      
		      cb.tcp_read = &supla_arduino_tcp_read;
		      cb.tcp_write = &supla_arduino_tcp_write;
		      cb.eth_setup = &supla_arduino_eth_setup;
		      cb.svr_connected = &supla_arduino_svr_connected;
		      cb.svr_connect = &supla_arduino_svr_connect;
		      cb.svr_disconnect = &supla_arduino_svr_disconnect;
		      cb.get_temperature = NULL;
		      cb.get_temperature_and_humidity = NULL;
		      cb.get_rgbw_value = NULL;
		      cb.set_rgbw_value = NULL;
		      
		      
		      return cb;
	}
	#endif
		
#endif